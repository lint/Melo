
#import <UIKit/UIKit.h>
#import "hooks.h"
#import "../objc/objc_classes.h"
#import "../interfaces/interfaces.h"

// add hooks to main file to be compiled
#import "Layout.xm"
#import "WiggleMode.xm"
#import "Pinning.xm"
#import "Theming.xm"
#import "Backport.xm"
#import "Library.xm"

// callback method for when a change in pinning preferences was detected
static void pinningPrefsChangedCallback() {
    [[MeloManager sharedInstance] handlePrefsChanged:@"com.lint.melo.prefs/pinning.updated"];
}

// callback method for when a change in layout preferences was detected
static void layoutPrefsChangedCallback() {
    [[MeloManager sharedInstance] handlePrefsChanged:@"com.lint.melo.prefs/layout.updated"];
}

// callback method for when a change in theming preferences was detected
static void themingPrefsChangedCallback() {
    [[MeloManager sharedInstance] handlePrefsChanged:@"com.lint.melo.prefs/theming.updated"];
}

// callback method for when a change in backport preferences was detected
static void backportPrefsChangedCallback() {
    [[MeloManager sharedInstance] handlePrefsChanged:@"com.lint.melo.prefs/backport.updated"];
}

// callback method for when a change in library preferences was detected
static void libraryPrefsChangedCallback() {
    [[MeloManager sharedInstance] handlePrefsChanged:@"com.lint.melo.prefs/library.updated"];
}


static void *observer;

// main constructor for melo
%ctor {
    
    MeloManager *meloManager = [MeloManager sharedInstance];

    // initialize melo
    if ([meloManager prefsBoolForKey:@"enabled"]) {
        [Logger logString:@"start initing hooks"];

        InitLayout();
        InitWiggleMode();
        InitPinning();
        InitTheming();
        InitBackport();
        InitLibrary();
    }

    // add observers for preference changes
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), observer, (CFNotificationCallback)pinningPrefsChangedCallback,
        CFSTR("com.lint.melo.prefs/pinning.updated"), NULL, CFNotificationSuspensionBehaviorCoalesce);
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), observer, (CFNotificationCallback)layoutPrefsChangedCallback,
        CFSTR("com.lint.melo.prefs/layout.updated"), NULL, CFNotificationSuspensionBehaviorCoalesce);
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), observer, (CFNotificationCallback)themingPrefsChangedCallback,
        CFSTR("com.lint.melo.prefs/theming.updated"), NULL, CFNotificationSuspensionBehaviorCoalesce);
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), observer, (CFNotificationCallback)backportPrefsChangedCallback,
        CFSTR("com.lint.melo.prefs/backport.updated"), NULL, CFNotificationSuspensionBehaviorCoalesce);
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), observer, (CFNotificationCallback)libraryPrefsChangedCallback,
        CFSTR("com.lint.melo.prefs/library.updated"), NULL, CFNotificationSuspensionBehaviorCoalesce);
}

// main deconstructor for melo
%dtor {
    
    // remove preference changes observers
    CFNotificationCenterRemoveObserver(CFNotificationCenterGetDarwinNotifyCenter(), observer, CFSTR("com.lint.melo.prefs/pinning.updated"), NULL);
    CFNotificationCenterRemoveObserver(CFNotificationCenterGetDarwinNotifyCenter(), observer, CFSTR("com.lint.melo.prefs/layout.updated"), NULL);
    CFNotificationCenterRemoveObserver(CFNotificationCenterGetDarwinNotifyCenter(), observer, CFSTR("com.lint.melo.prefs/theming.updated"), NULL);
    CFNotificationCenterRemoveObserver(CFNotificationCenterGetDarwinNotifyCenter(), observer, CFSTR("com.lint.melo.prefs/backport.updated"), NULL);
    CFNotificationCenterRemoveObserver(CFNotificationCenterGetDarwinNotifyCenter(), observer, CFSTR("com.lint.melo.prefs/library.updated"), NULL);
}